#!/bin/bash

# Only generate commit messages for new commits (skip rebase/amend cases)
if [ "$2" == "message" ] || [ "$2" == "template" ] || [ -n "$3" ]; then
    exit 0
fi

# Get the list of staged files
STAGED_FILES=$(git diff --cached --name-only)

# Ensure there are changes to commit
if [ -z "$STAGED_FILES" ]; then
    echo "No changes to commit." >&2
    exit 1
fi

# Get the diff for all changes
FILE_DIFF=$(git diff --cached)

# Build a prompt
PROMPT="Below is a git diff of the curently staged changes.
################################################################################
$FILE_DIFF
################################################################################
Based on this information, write a short, clear commit message that accurately captures the changes.
Use the imperative present tense and bulleted style.
Do not restate the diff.
Do not wrap your final response in any styling or blocks.
Respond directly with the commit message.
"

# Use jq to safely construct the JSON request body
REQUEST_BODY=$(jq -n \
  --arg role "user" \
  --arg content "$PROMPT" \
  '{
    messages: [{role: $role, content: $content}],
    temperature: 0.7,
    max_tokens: 4096
  }')

# Send the request to the mlx-lm server
COMMIT_MESSAGE=$(curl -s localhost:8080/v1/chat/completions \
    -H "Content-Type: application/json" \
    -d "$REQUEST_BODY" | jq -r '.choices[0].message.content')

# DeepSeek-R1 thinks, lets remove the tag and content of the think.
COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE" | awk 'BEGIN {skip=0} /<think>/ {skip=1} /<\/think>/ {skip=0; next} !skip {print}')

# Write the final commit message to the commit file
if [ -n "$COMMIT_MESSAGE" ]; then
    echo -e "$COMMIT_MESSAGE" > "$1"
else
    echo "Failed to generate commit messages." >&2
    exit 1
fi
